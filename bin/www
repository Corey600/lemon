#!/usr/bin/env node

/**
 * Module dependencies.
 */

var path = require('path')
var http = require('http')
var config = require('config')

var app = require('../app').app
var version = require('../package.json').version
var logger = require('../lib/common/log').getLogger(path.basename(__filename))

logger.info('VERSION:', version, ', NODE_ENV:', app.env, ', NODE_CONFIG_DIR:', process.env.NODE_CONFIG_DIR)
logger.info('Config path:', config.get('configPath'))

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.get('server.port'))

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback())

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
  logger.info('listening on ' + bind)
}
